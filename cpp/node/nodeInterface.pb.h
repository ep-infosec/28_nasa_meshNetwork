// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nodeInterface.proto

#ifndef PROTOBUF_INCLUDED_nodeInterface_2eproto
#define PROTOBUF_INCLUDED_nodeInterface_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_nodeInterface_2eproto 

namespace protobuf_nodeInterface_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_nodeInterface_2eproto
namespace nodeInterface {
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class NodeThreadMsg;
class NodeThreadMsgDefaultTypeInternal;
extern NodeThreadMsgDefaultTypeInternal _NodeThreadMsg_default_instance_;
}  // namespace nodeInterface
namespace google {
namespace protobuf {
template<> ::nodeInterface::Command* Arena::CreateMaybeMessage<::nodeInterface::Command>(Arena*);
template<> ::nodeInterface::NodeThreadMsg* Arena::CreateMaybeMessage<::nodeInterface::NodeThreadMsg>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace nodeInterface {

enum NodeThreadMsg_NodeMsgType {
  NodeThreadMsg_NodeMsgType_NODE = 0,
  NodeThreadMsg_NodeMsgType_COMM = 1,
  NodeThreadMsg_NodeMsgType_NodeThreadMsg_NodeMsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NodeThreadMsg_NodeMsgType_NodeThreadMsg_NodeMsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NodeThreadMsg_NodeMsgType_IsValid(int value);
const NodeThreadMsg_NodeMsgType NodeThreadMsg_NodeMsgType_NodeMsgType_MIN = NodeThreadMsg_NodeMsgType_NODE;
const NodeThreadMsg_NodeMsgType NodeThreadMsg_NodeMsgType_NodeMsgType_MAX = NodeThreadMsg_NodeMsgType_COMM;
const int NodeThreadMsg_NodeMsgType_NodeMsgType_ARRAYSIZE = NodeThreadMsg_NodeMsgType_NodeMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NodeThreadMsg_NodeMsgType_descriptor();
inline const ::std::string& NodeThreadMsg_NodeMsgType_Name(NodeThreadMsg_NodeMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NodeThreadMsg_NodeMsgType_descriptor(), value);
}
inline bool NodeThreadMsg_NodeMsgType_Parse(
    const ::std::string& name, NodeThreadMsg_NodeMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NodeThreadMsg_NodeMsgType>(
    NodeThreadMsg_NodeMsgType_descriptor(), name, value);
}
// ===================================================================

class Command : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nodeInterface.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(NULL);
  }

  Command* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msgBytes = 2;
  void clear_msgbytes();
  static const int kMsgBytesFieldNumber = 2;
  const ::std::string& msgbytes() const;
  void set_msgbytes(const ::std::string& value);
  #if LANG_CXX11
  void set_msgbytes(::std::string&& value);
  #endif
  void set_msgbytes(const char* value);
  void set_msgbytes(const void* value, size_t size);
  ::std::string* mutable_msgbytes();
  ::std::string* release_msgbytes();
  void set_allocated_msgbytes(::std::string* msgbytes);

  // float txInterval = 1;
  void clear_txinterval();
  static const int kTxIntervalFieldNumber = 1;
  float txinterval() const;
  void set_txinterval(float value);

  // uint32 cmdId = 3;
  void clear_cmdid();
  static const int kCmdIdFieldNumber = 3;
  ::google::protobuf::uint32 cmdid() const;
  void set_cmdid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:nodeInterface.Command)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msgbytes_;
  float txinterval_;
  ::google::protobuf::uint32 cmdid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nodeInterface_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NodeThreadMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nodeInterface.NodeThreadMsg) */ {
 public:
  NodeThreadMsg();
  virtual ~NodeThreadMsg();

  NodeThreadMsg(const NodeThreadMsg& from);

  inline NodeThreadMsg& operator=(const NodeThreadMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeThreadMsg(NodeThreadMsg&& from) noexcept
    : NodeThreadMsg() {
    *this = ::std::move(from);
  }

  inline NodeThreadMsg& operator=(NodeThreadMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeThreadMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeThreadMsg* internal_default_instance() {
    return reinterpret_cast<const NodeThreadMsg*>(
               &_NodeThreadMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(NodeThreadMsg* other);
  friend void swap(NodeThreadMsg& a, NodeThreadMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeThreadMsg* New() const final {
    return CreateMaybeMessage<NodeThreadMsg>(NULL);
  }

  NodeThreadMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeThreadMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeThreadMsg& from);
  void MergeFrom(const NodeThreadMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeThreadMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NodeThreadMsg_NodeMsgType NodeMsgType;
  static const NodeMsgType NODE =
    NodeThreadMsg_NodeMsgType_NODE;
  static const NodeMsgType COMM =
    NodeThreadMsg_NodeMsgType_COMM;
  static inline bool NodeMsgType_IsValid(int value) {
    return NodeThreadMsg_NodeMsgType_IsValid(value);
  }
  static const NodeMsgType NodeMsgType_MIN =
    NodeThreadMsg_NodeMsgType_NodeMsgType_MIN;
  static const NodeMsgType NodeMsgType_MAX =
    NodeThreadMsg_NodeMsgType_NodeMsgType_MAX;
  static const int NodeMsgType_ARRAYSIZE =
    NodeThreadMsg_NodeMsgType_NodeMsgType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NodeMsgType_descriptor() {
    return NodeThreadMsg_NodeMsgType_descriptor();
  }
  static inline const ::std::string& NodeMsgType_Name(NodeMsgType value) {
    return NodeThreadMsg_NodeMsgType_Name(value);
  }
  static inline bool NodeMsgType_Parse(const ::std::string& name,
      NodeMsgType* value) {
    return NodeThreadMsg_NodeMsgType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .nodeInterface.Command cmds = 4;
  int cmds_size() const;
  void clear_cmds();
  static const int kCmdsFieldNumber = 4;
  ::nodeInterface::Command* mutable_cmds(int index);
  ::google::protobuf::RepeatedPtrField< ::nodeInterface::Command >*
      mutable_cmds();
  const ::nodeInterface::Command& cmds(int index) const;
  ::nodeInterface::Command* add_cmds();
  const ::google::protobuf::RepeatedPtrField< ::nodeInterface::Command >&
      cmds() const;

  // repeated uint32 linkStatus = 5;
  int linkstatus_size() const;
  void clear_linkstatus();
  static const int kLinkStatusFieldNumber = 5;
  ::google::protobuf::uint32 linkstatus(int index) const;
  void set_linkstatus(int index, ::google::protobuf::uint32 value);
  void add_linkstatus(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      linkstatus() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_linkstatus();

  // bytes cmdRelay = 3;
  void clear_cmdrelay();
  static const int kCmdRelayFieldNumber = 3;
  const ::std::string& cmdrelay() const;
  void set_cmdrelay(const ::std::string& value);
  #if LANG_CXX11
  void set_cmdrelay(::std::string&& value);
  #endif
  void set_cmdrelay(const char* value);
  void set_cmdrelay(const void* value, size_t size);
  ::std::string* mutable_cmdrelay();
  ::std::string* release_cmdrelay();
  void set_allocated_cmdrelay(::std::string* cmdrelay);

  // bytes rcvdBytes = 6;
  void clear_rcvdbytes();
  static const int kRcvdBytesFieldNumber = 6;
  const ::std::string& rcvdbytes() const;
  void set_rcvdbytes(const ::std::string& value);
  #if LANG_CXX11
  void set_rcvdbytes(::std::string&& value);
  #endif
  void set_rcvdbytes(const char* value);
  void set_rcvdbytes(const void* value, size_t size);
  ::std::string* mutable_rcvdbytes();
  ::std::string* release_rcvdbytes();
  void set_allocated_rcvdbytes(::std::string* rcvdbytes);

  // bytes dataBlock = 7;
  void clear_datablock();
  static const int kDataBlockFieldNumber = 7;
  const ::std::string& datablock() const;
  void set_datablock(const ::std::string& value);
  #if LANG_CXX11
  void set_datablock(::std::string&& value);
  #endif
  void set_datablock(const char* value);
  void set_datablock(const void* value, size_t size);
  ::std::string* mutable_datablock();
  ::std::string* release_datablock();
  void set_allocated_datablock(::std::string* datablock);

  // double timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  double timestamp() const;
  void set_timestamp(double value);

  // .nodeInterface.NodeThreadMsg.NodeMsgType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::nodeInterface::NodeThreadMsg_NodeMsgType type() const;
  void set_type(::nodeInterface::NodeThreadMsg_NodeMsgType value);

  // @@protoc_insertion_point(class_scope:nodeInterface.NodeThreadMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::nodeInterface::Command > cmds_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > linkstatus_;
  mutable int _linkstatus_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr cmdrelay_;
  ::google::protobuf::internal::ArenaStringPtr rcvdbytes_;
  ::google::protobuf::internal::ArenaStringPtr datablock_;
  double timestamp_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nodeInterface_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Command

// float txInterval = 1;
inline void Command::clear_txinterval() {
  txinterval_ = 0;
}
inline float Command::txinterval() const {
  // @@protoc_insertion_point(field_get:nodeInterface.Command.txInterval)
  return txinterval_;
}
inline void Command::set_txinterval(float value) {
  
  txinterval_ = value;
  // @@protoc_insertion_point(field_set:nodeInterface.Command.txInterval)
}

// bytes msgBytes = 2;
inline void Command::clear_msgbytes() {
  msgbytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Command::msgbytes() const {
  // @@protoc_insertion_point(field_get:nodeInterface.Command.msgBytes)
  return msgbytes_.GetNoArena();
}
inline void Command::set_msgbytes(const ::std::string& value) {
  
  msgbytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nodeInterface.Command.msgBytes)
}
#if LANG_CXX11
inline void Command::set_msgbytes(::std::string&& value) {
  
  msgbytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nodeInterface.Command.msgBytes)
}
#endif
inline void Command::set_msgbytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msgbytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nodeInterface.Command.msgBytes)
}
inline void Command::set_msgbytes(const void* value, size_t size) {
  
  msgbytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nodeInterface.Command.msgBytes)
}
inline ::std::string* Command::mutable_msgbytes() {
  
  // @@protoc_insertion_point(field_mutable:nodeInterface.Command.msgBytes)
  return msgbytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command::release_msgbytes() {
  // @@protoc_insertion_point(field_release:nodeInterface.Command.msgBytes)
  
  return msgbytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_msgbytes(::std::string* msgbytes) {
  if (msgbytes != NULL) {
    
  } else {
    
  }
  msgbytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgbytes);
  // @@protoc_insertion_point(field_set_allocated:nodeInterface.Command.msgBytes)
}

// uint32 cmdId = 3;
inline void Command::clear_cmdid() {
  cmdid_ = 0u;
}
inline ::google::protobuf::uint32 Command::cmdid() const {
  // @@protoc_insertion_point(field_get:nodeInterface.Command.cmdId)
  return cmdid_;
}
inline void Command::set_cmdid(::google::protobuf::uint32 value) {
  
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:nodeInterface.Command.cmdId)
}

// -------------------------------------------------------------------

// NodeThreadMsg

// .nodeInterface.NodeThreadMsg.NodeMsgType type = 1;
inline void NodeThreadMsg::clear_type() {
  type_ = 0;
}
inline ::nodeInterface::NodeThreadMsg_NodeMsgType NodeThreadMsg::type() const {
  // @@protoc_insertion_point(field_get:nodeInterface.NodeThreadMsg.type)
  return static_cast< ::nodeInterface::NodeThreadMsg_NodeMsgType >(type_);
}
inline void NodeThreadMsg::set_type(::nodeInterface::NodeThreadMsg_NodeMsgType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:nodeInterface.NodeThreadMsg.type)
}

// double timestamp = 2;
inline void NodeThreadMsg::clear_timestamp() {
  timestamp_ = 0;
}
inline double NodeThreadMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:nodeInterface.NodeThreadMsg.timestamp)
  return timestamp_;
}
inline void NodeThreadMsg::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:nodeInterface.NodeThreadMsg.timestamp)
}

// bytes cmdRelay = 3;
inline void NodeThreadMsg::clear_cmdrelay() {
  cmdrelay_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeThreadMsg::cmdrelay() const {
  // @@protoc_insertion_point(field_get:nodeInterface.NodeThreadMsg.cmdRelay)
  return cmdrelay_.GetNoArena();
}
inline void NodeThreadMsg::set_cmdrelay(const ::std::string& value) {
  
  cmdrelay_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nodeInterface.NodeThreadMsg.cmdRelay)
}
#if LANG_CXX11
inline void NodeThreadMsg::set_cmdrelay(::std::string&& value) {
  
  cmdrelay_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nodeInterface.NodeThreadMsg.cmdRelay)
}
#endif
inline void NodeThreadMsg::set_cmdrelay(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cmdrelay_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nodeInterface.NodeThreadMsg.cmdRelay)
}
inline void NodeThreadMsg::set_cmdrelay(const void* value, size_t size) {
  
  cmdrelay_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nodeInterface.NodeThreadMsg.cmdRelay)
}
inline ::std::string* NodeThreadMsg::mutable_cmdrelay() {
  
  // @@protoc_insertion_point(field_mutable:nodeInterface.NodeThreadMsg.cmdRelay)
  return cmdrelay_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeThreadMsg::release_cmdrelay() {
  // @@protoc_insertion_point(field_release:nodeInterface.NodeThreadMsg.cmdRelay)
  
  return cmdrelay_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeThreadMsg::set_allocated_cmdrelay(::std::string* cmdrelay) {
  if (cmdrelay != NULL) {
    
  } else {
    
  }
  cmdrelay_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmdrelay);
  // @@protoc_insertion_point(field_set_allocated:nodeInterface.NodeThreadMsg.cmdRelay)
}

// repeated .nodeInterface.Command cmds = 4;
inline int NodeThreadMsg::cmds_size() const {
  return cmds_.size();
}
inline void NodeThreadMsg::clear_cmds() {
  cmds_.Clear();
}
inline ::nodeInterface::Command* NodeThreadMsg::mutable_cmds(int index) {
  // @@protoc_insertion_point(field_mutable:nodeInterface.NodeThreadMsg.cmds)
  return cmds_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nodeInterface::Command >*
NodeThreadMsg::mutable_cmds() {
  // @@protoc_insertion_point(field_mutable_list:nodeInterface.NodeThreadMsg.cmds)
  return &cmds_;
}
inline const ::nodeInterface::Command& NodeThreadMsg::cmds(int index) const {
  // @@protoc_insertion_point(field_get:nodeInterface.NodeThreadMsg.cmds)
  return cmds_.Get(index);
}
inline ::nodeInterface::Command* NodeThreadMsg::add_cmds() {
  // @@protoc_insertion_point(field_add:nodeInterface.NodeThreadMsg.cmds)
  return cmds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nodeInterface::Command >&
NodeThreadMsg::cmds() const {
  // @@protoc_insertion_point(field_list:nodeInterface.NodeThreadMsg.cmds)
  return cmds_;
}

// repeated uint32 linkStatus = 5;
inline int NodeThreadMsg::linkstatus_size() const {
  return linkstatus_.size();
}
inline void NodeThreadMsg::clear_linkstatus() {
  linkstatus_.Clear();
}
inline ::google::protobuf::uint32 NodeThreadMsg::linkstatus(int index) const {
  // @@protoc_insertion_point(field_get:nodeInterface.NodeThreadMsg.linkStatus)
  return linkstatus_.Get(index);
}
inline void NodeThreadMsg::set_linkstatus(int index, ::google::protobuf::uint32 value) {
  linkstatus_.Set(index, value);
  // @@protoc_insertion_point(field_set:nodeInterface.NodeThreadMsg.linkStatus)
}
inline void NodeThreadMsg::add_linkstatus(::google::protobuf::uint32 value) {
  linkstatus_.Add(value);
  // @@protoc_insertion_point(field_add:nodeInterface.NodeThreadMsg.linkStatus)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NodeThreadMsg::linkstatus() const {
  // @@protoc_insertion_point(field_list:nodeInterface.NodeThreadMsg.linkStatus)
  return linkstatus_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NodeThreadMsg::mutable_linkstatus() {
  // @@protoc_insertion_point(field_mutable_list:nodeInterface.NodeThreadMsg.linkStatus)
  return &linkstatus_;
}

// bytes rcvdBytes = 6;
inline void NodeThreadMsg::clear_rcvdbytes() {
  rcvdbytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeThreadMsg::rcvdbytes() const {
  // @@protoc_insertion_point(field_get:nodeInterface.NodeThreadMsg.rcvdBytes)
  return rcvdbytes_.GetNoArena();
}
inline void NodeThreadMsg::set_rcvdbytes(const ::std::string& value) {
  
  rcvdbytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nodeInterface.NodeThreadMsg.rcvdBytes)
}
#if LANG_CXX11
inline void NodeThreadMsg::set_rcvdbytes(::std::string&& value) {
  
  rcvdbytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nodeInterface.NodeThreadMsg.rcvdBytes)
}
#endif
inline void NodeThreadMsg::set_rcvdbytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rcvdbytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nodeInterface.NodeThreadMsg.rcvdBytes)
}
inline void NodeThreadMsg::set_rcvdbytes(const void* value, size_t size) {
  
  rcvdbytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nodeInterface.NodeThreadMsg.rcvdBytes)
}
inline ::std::string* NodeThreadMsg::mutable_rcvdbytes() {
  
  // @@protoc_insertion_point(field_mutable:nodeInterface.NodeThreadMsg.rcvdBytes)
  return rcvdbytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeThreadMsg::release_rcvdbytes() {
  // @@protoc_insertion_point(field_release:nodeInterface.NodeThreadMsg.rcvdBytes)
  
  return rcvdbytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeThreadMsg::set_allocated_rcvdbytes(::std::string* rcvdbytes) {
  if (rcvdbytes != NULL) {
    
  } else {
    
  }
  rcvdbytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rcvdbytes);
  // @@protoc_insertion_point(field_set_allocated:nodeInterface.NodeThreadMsg.rcvdBytes)
}

// bytes dataBlock = 7;
inline void NodeThreadMsg::clear_datablock() {
  datablock_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeThreadMsg::datablock() const {
  // @@protoc_insertion_point(field_get:nodeInterface.NodeThreadMsg.dataBlock)
  return datablock_.GetNoArena();
}
inline void NodeThreadMsg::set_datablock(const ::std::string& value) {
  
  datablock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nodeInterface.NodeThreadMsg.dataBlock)
}
#if LANG_CXX11
inline void NodeThreadMsg::set_datablock(::std::string&& value) {
  
  datablock_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nodeInterface.NodeThreadMsg.dataBlock)
}
#endif
inline void NodeThreadMsg::set_datablock(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  datablock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nodeInterface.NodeThreadMsg.dataBlock)
}
inline void NodeThreadMsg::set_datablock(const void* value, size_t size) {
  
  datablock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nodeInterface.NodeThreadMsg.dataBlock)
}
inline ::std::string* NodeThreadMsg::mutable_datablock() {
  
  // @@protoc_insertion_point(field_mutable:nodeInterface.NodeThreadMsg.dataBlock)
  return datablock_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeThreadMsg::release_datablock() {
  // @@protoc_insertion_point(field_release:nodeInterface.NodeThreadMsg.dataBlock)
  
  return datablock_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeThreadMsg::set_allocated_datablock(::std::string* datablock) {
  if (datablock != NULL) {
    
  } else {
    
  }
  datablock_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), datablock);
  // @@protoc_insertion_point(field_set_allocated:nodeInterface.NodeThreadMsg.dataBlock)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace nodeInterface

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::nodeInterface::NodeThreadMsg_NodeMsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nodeInterface::NodeThreadMsg_NodeMsgType>() {
  return ::nodeInterface::NodeThreadMsg_NodeMsgType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_nodeInterface_2eproto
